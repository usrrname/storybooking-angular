{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-ccb132c6b7036af26ef3c708aa49b084",
            "file": "src/app/models/task.model.ts",
            "type": "interface",
            "sourceCode": "export interface Task {\n  id: string;\n  title: string;\n  state: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-701da68fa1dc493f6b8949c41d446bd1",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "ArchiveTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "PinTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\nexport const actions = {\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class GetTasks {\n  static readonly type = actions.GET_TASKS;\n  constructor(public payload: string){}\n}\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  constructor(){}\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 48
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-701da68fa1dc493f6b8949c41d446bd1",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\nexport const actions = {\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class GetTasks {\n  static readonly type = actions.GET_TASKS;\n  constructor(public payload: string){}\n}\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  constructor(){}\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetTasks",
            "id": "class-GetTasks-701da68fa1dc493f6b8949c41d446bd1",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\nexport const actions = {\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class GetTasks {\n  static readonly type = actions.GET_TASKS;\n  constructor(public payload: string){}\n}\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  constructor(){}\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.GET_TASKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-701da68fa1dc493f6b8949c41d446bd1",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\nexport const actions = {\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class GetTasks {\n  static readonly type = actions.GET_TASKS;\n  constructor(public payload: string){}\n}\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  constructor(){}\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TaskStateModel",
            "id": "class-TaskStateModel-701da68fa1dc493f6b8949c41d446bd1",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\nexport const actions = {\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n  constructor(public payload: string) {}\n}\n\nexport class GetTasks {\n  static readonly type = actions.GET_TASKS;\n  constructor(public payload: string){}\n}\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  constructor(){}\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "entities",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5ef00e9820cc50db493e3251ce62dac7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'demo'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'demo';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles.css';\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-0608aec5159ae75a37c6e09a27145d76",
            "file": "src/app/components/pure-task-list/pure-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pure-task-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tasks",
                    "line": 16,
                    "type": "Task[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "type": "Observable<Task[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "TasksState.getAllTasks"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ArchiveTask, PinTask, TasksState } from '../../state/task.state';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\n\nimport { Observable } from 'rxjs';\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-pure-task-list',\n  templateUrl: `./pure-task-list.component.html`,\n})\n\nexport class PureTaskListComponent implements OnInit {\n\n  @Select(TasksState.getAllTasks) tasks$: Observable<Task[]>;\n  @Input() tasks?: Task[];\n\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n  }\n\n  archiveTask(id: string): void {\n    this.store.dispatch(new ArchiveTask(id));\n  }\n\n  pinTask(id: string): void {\n    this.store.dispatch(new PinTask(id));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-pure-task-list\n[tasks]=\"tasks$ | async\"\n(onArchiveTask)=\"archiveTask($event)\"\n(onPinTask)=\"pinTask($event)\"\n></app-pure-task-list>\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-855c3a306aa7463af44800e76a5261e5",
            "file": "src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "line": 11,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: `./task.component.html`\n})\nexport class TaskComponent implements OnInit {\n  title: string;\n  @Input() task: Task;\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onPin(id: any): void {\n    this.onPinTask.emit(id);\n  }\n  onArchive(id: any): void {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list-item {{ task?.state }}\">\n  <label class=\"checkbox\">\n    <input\n      type=\"checkbox\"\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n      disabled=\"true\"\n      name=\"checked\"\n    />\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n  </label>\n  <div class=\"title\">\n    <input type=\"text\" [value]=\"task?.title\" readonly=\"true\" placeholder=\"Input title\" />\n  </div>\n  <div class=\"actions\">\n    <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n      <span class=\"icon-star\"></span>\n    </a>\n  </div>\n</div>\n"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-18e6e0eedd582a59b90f9853dfd88b25",
            "file": "src/app/components/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "tasks",
                    "line": 18,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tasksInOrder",
                    "defaultValue": "[]",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: `./task-list.component.html`,\n})\nexport class TaskListComponent implements OnInit {\n  tasksInOrder: Task[] = [];\n  @Input() loading = false;\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    this.tasksInOrder = [\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "args": [
                            {
                                "name": "arr",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "\n  <div class=\"list-items\">\n      <app-task\n        *ngFor=\"let task of tasksInOrder\"\n        [task]=\"task\"\n        (onArchiveTask)=\"onArchiveTask.emit($event)\"\n        (onPinTask)=\"onPinTask.emit($event)\"\n      >\n      </app-task>\n\n\n      <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n        <span class=\"icon-check\"></span>\n        <div class=\"title-message\">You have no tasks</div>\n        <div class=\"subtitle-message\">Sit back and relax</div>\n      </div>\n\n      <div *ngIf=\"loading\">\n        <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n          <span class=\"glow-checkbox\"></span>\n          <span class=\"glow-text\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\n        </div>\n      </div>\n    </div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskListComponent,\n  templateUrl: `./task-list.component.html`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskListComponent,\n  templateUrl: `./task-list.component.html`,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "withPinnedTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
            },
            {
                "name": "withPinnedTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  GET_TASKS: 'GET_TASKS',\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
                }
            ],
            "src/app/components/task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/components/pure-task-list/pure-task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "withPinnedTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
                }
            ],
            "src/app/components/task-list/task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskListComponent,\n  templateUrl: `./task-list.component.html`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskListComponent,\n  templateUrl: `./task-list.component.html`,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "withPinnedTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/jest-config/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "AppComponent",
                        "children": [
                            {
                                "path": "tasklist",
                                "component": "TaskListComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withPinnedTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withPinnedTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetTasks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}