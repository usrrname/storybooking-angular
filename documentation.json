{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-3c44327da86ef5ad0677ac60e2d51dfc",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "ArchiveTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "PinTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAppError",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "AppError"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AppError"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AppError",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/types';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) { }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) { }\n}\n\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) { }\n}\n\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppError",
            "id": "class-AppError-3c44327da86ef5ad0677ac60e2d51dfc",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/types';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) { }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) { }\n}\n\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) { }\n}\n\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-3c44327da86ef5ad0677ac60e2d51dfc",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/types';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) { }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) { }\n}\n\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) { }\n}\n\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-3c44327da86ef5ad0677ac60e2d51dfc",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/types';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) { }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) { }\n}\n\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) { }\n}\n\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Task",
            "id": "class-Task-09e29e6d1e969ac43e92e73f03d124c4",
            "file": "src/app/models/types.ts",
            "type": "class",
            "sourceCode": "export abstract class Task {\n  id: string;\n  title: string;\n  state: string;\n  done?: boolean;\n}\n",
            "properties": [
                {
                    "name": "done",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TaskStateModel",
            "id": "class-TaskStateModel-3c44327da86ef5ad0677ac60e2d51dfc",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/types';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) { }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) { }\n}\n\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) { }\n}\n\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false\n  },\n})\n@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n\n  // triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>, { payload }: AppError): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "entities",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "error",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cac0f7a3c823689c85293af469660fa3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybok'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'storybok';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet class=\"container\"></router-outlet>\n\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-55536afa1139262db5fe0272641312ab",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 33
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 13
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 25,
                    "type": "\"sm\" | \"md\" | \"lg\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'btn-primary' : 'btn-secondary';\n\n    return ['btn', `btn-${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles.scss';\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer class=\"page-footer bg-dark text-white pt-3\">\n  <!-- Footer Links -->\n  <div class=\"container-fluid text-center text-md-left\">\n    <!-- Grid row -->\n    <div class=\"row\">\n      <!-- Grid column -->\n      <div class=\"col-md-6 mt-md-0 mt-3\">\n        <!-- Content -->\n        <h5 class=\"text-uppercase\">Footer Content</h5>\n        <p class=\"small\">Here you can use rows and columns here to organize your footer content.</p>\n\n      </div>\n      <!-- Grid column -->\n      <hr class=\"clearfix w-100 d-md-none pb-3\">\n      <!-- Grid column -->\n      <div class=\"col-md-3 mb-md-0 mb-3\">\n\n          <!-- Links -->\n          <h5 class=\"text-uppercase\">Subtitle</h5>\n\n          <ul class=\"list-unstyled\">\n            <li>\n              <a href=\"#!\">Link 1</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 2</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 3</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 4</a>\n            </li>\n          </ul>\n\n        </div>\n        <!-- Grid column -->\n\n        <!-- Grid column -->\n        <div class=\"col-md-3 mb-md-0 mb-3\">\n\n          <!-- Links -->\n          <h5 class=\"text-uppercase\">Links</h5>\n\n          <ul class=\"list-unstyled\">\n            <li>\n              <a href=\"#!\">Link 1</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 2</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 3</a>\n            </li>\n            <li>\n              <a href=\"#!\">Link 4</a>\n            </li>\n          </ul>\n\n        </div>\n        <!-- Grid column -->\n    </div>\n    <!-- Grid row -->\n  </div>\n  <!-- Footer Links -->\n  <div class=\"footer-copyright text-center py-3\">2020\n    <a href=\"https://example.com/\"> Example.com</a>\n  </div>\n</footer>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ff84dab953633d87151483d99af15754",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Header'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\n\nexport class HeaderComponent implements OnInit {\n  title = 'Header';\n  constructor() { }\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header class=\"header wrapper\">\n  <nav class=\"navbar navbar-expand-md bg-dark navbar-dark fixed-top\">\n    <h1 class=\"navbar-brand\">{{title}} </h1>\n    <span class=\"pl-2\">\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\" fill=\"#FFF\" />\n          <path d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\" fill=\"#555AB9\" />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n    </span>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\"\n      aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"/home\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"/contact-list\">Contacts</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" routerLink=\"/contact-create\">Create</a>\n        </li>\n      </ul>\n    </div>\n    <div>\n      <app-button\n        *ngIf=\"user\"\n        size=\"sm\"\n        (onClick)=\"onLogout.emit($event)\"\n        label=\"Log out\"\n      ></app-button>\n      <app-button\n        *ngIf=\"!user\"\n        size=\"sm\"\n        (onClick)=\"onLogin.emit($event)\"\n        label=\"Log in\"\n      ></app-button>\n      <app-button\n        *ngIf=\"!user\"\n        primary\n        size=\"sm\"\n        (onClick)=\"onCreateAccount.emit($event)\"\n        label=\"Sign up\"\n      ></app-button>\n    </div>\n  </nav>\n</header>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-bb9aacd2398d0baf53bc94f06bcc0130",
            "file": "src/app/components/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page",
            "styleUrls": [
                "./page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 9,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.scss']\n})\nexport class PageComponent implements OnInit {\n  @Input() user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [user]=\"user\" (onLogout)=\"onLogout.emit($event)\" (onLogin)=\"onLogin.emit($event)\"\n  (onCreateAccount)=\"onCreateAccount.emit($event)\"></app-header>\n<section class=\"container\">\n  <div>Try clicking the \"Log In\", \"Sign up\" or \"Log out\" button</div>\n</section>\n<app-footer></app-footer>\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-64994efc36580908e22cb664149ba500",
            "file": "src/app/components/task/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "../task-list/task-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "line": 14,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "done",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from 'src/app/models/types';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: [`../task-list/task-list.component.scss`]\n})\nexport class TaskComponent implements OnInit {\n  title: string;\n  done: boolean;\n\n  @Input() public task: Task;\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  constructor() {}\n\n  onArchive(id: string): void {\n    this.onArchiveTask.emit(id);\n  }\n\n  onPin(id: string): void {\n    this.onPinTask.emit(id);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@font-face {\n  font-family: 'percolate';\n  src: url('../../../../assets/icon/percolate.eot?-5w3um4');\n  src: url('../../../../assets/icon/percolate.eot?#iefix5w3um4') format('embedded-opentype'), url('../../../../assets/icon/percolate.woff?5w3um4')\n      format('woff'), url('../../../../assets/icon/percolate.ttf?5w3um4') format('truetype'), url('../../../../assets/icon/percolate.svg?5w3um4')\n      format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Reset.less\n * Props to Eric Meyer (meyerweb.com) for his CSS reset file. We're using an adapted version here\tthat cuts out some of the reset HTML elements we will never need here (i.e., dfn, samp, etc).\n * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */\n @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n html,\n body {\n   margin: 0;\n   padding: 0;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6,\n p,\n blockquote,\n pre,\n a,\n abbr,\n acronym,\n address,\n cite,\n code,\n del,\n dfn,\n em,\n img,\n q,\n s,\n samp,\n small,\n strike,\n strong,\n sub,\n sup,\n tt,\n var,\n dd,\n dl,\n dt,\n li,\n ol,\n ul,\n fieldset,\n form,\n label,\n legend,\n button,\n table,\n caption,\n tbody,\n tfoot,\n thead,\n tr,\n th,\n td {\n   margin: 0;\n   padding: 0;\n   border: 0;\n   font-weight: normal;\n   font-style: normal;\n   font-size: 100%;\n   line-height: 1;\n   font-family: inherit;\n }\n table {\n   border-collapse: collapse;\n   border-spacing: 0;\n }\n ol,\n ul {\n   list-style: none;\n }\n q:before,\n q:after,\n blockquote:before,\n blockquote:after {\n   content: \"\";\n }\n html {\n   font-size: 100%;\n   -webkit-text-size-adjust: 100%;\n   -ms-text-size-adjust: 100%;\n }\n a:focus {\n   outline: thin dotted;\n }\n a:hover,\n a:active {\n   outline: 0;\n }\n article,\n aside,\n details,\n figcaption,\n figure,\n footer,\n header,\n hgroup,\n nav,\n section {\n   display: block;\n }\n audio,\n canvas,\n video {\n   display: inline-block;\n   *display: inline;\n   *zoom: 1;\n }\n audio:not([controls]) {\n   display: none;\n }\n sub,\n sup {\n   font-size: 75%;\n   line-height: 0;\n   position: relative;\n   vertical-align: baseline;\n }\n sup {\n   top: -0.5em;\n }\n sub {\n   bottom: -0.25em;\n }\n img {\n   border: 0;\n   -ms-interpolation-mode: bicubic;\n }\n button,\n input,\n select,\n textarea {\n   font-size: 100%;\n   margin: 0;\n   vertical-align: baseline;\n   *vertical-align: middle;\n }\n button,\n input {\n   line-height: normal;\n   *overflow: visible;\n }\n button::-moz-focus-inner,\n input::-moz-focus-inner {\n   border: 0;\n   padding: 0;\n }\n button,\n input[type=\"button\"],\n input[type=\"reset\"],\n input[type=\"submit\"] {\n   cursor: pointer;\n   -webkit-appearance: button;\n }\n input[type=\"search\"] {\n   -webkit-appearance: textfield;\n   -webkit-box-sizing: content-box;\n   -moz-box-sizing: content-box;\n   box-sizing: content-box;\n }\n input[type=\"search\"]::-webkit-search-decoration {\n   -webkit-appearance: none;\n }\n textarea {\n   overflow: auto;\n   vertical-align: top;\n }\n @keyframes spin {\n   0% {\n     transform: rotate(0deg);\n   }\n   100% {\n     transform: rotate(359deg);\n   }\n }\n @keyframes glow {\n   0%,\n   100% {\n     opacity: 1;\n   }\n   50% {\n     opacity: 0.5;\n   }\n }\n .force-wrap {\n   word-wrap: break-word;\n   word-break: break-all;\n   -ms-word-break: break-all;\n   word-break: break-word;\n   hyphens: auto;\n }\n .type-light {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 300;\n }\n .type-bold {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n }\n .type-italic {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 400;\n   font-style: italic;\n }\n * {\n   box-sizing: border-box;\n   -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n   -webkit-tap-highlight-color: transparent;\n }\n html,\n button,\n input,\n textarea,\n select {\n   outline: none;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n body {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   color: #333;\n   font-size: 16px;\n   background-color: #26c6da;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6 {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   margin: 0;\n   padding: 0;\n }\n h1 {\n   font-size: 40px;\n   line-height: 48px;\n }\n h2 {\n   font-size: 28px;\n   line-height: 32px;\n }\n h3 {\n   font-size: 24px;\n   line-height: 28px;\n }\n h4 {\n   font-size: 20px;\n   line-height: 24px;\n }\n h5 {\n   font-size: 14px;\n   line-height: 20px;\n   color: #ccc;\n   text-transform: uppercase;\n }\n h6 {\n   color: #aaa;\n }\n p {\n   font-size: 16px;\n   line-height: 24px;\n }\n sub,\n sup {\n   font-size: 0.8em;\n }\n sub {\n   bottom: -0.2em;\n }\n sup {\n   top: -0.2em;\n }\n b {\n   font-weight: bold;\n }\n em {\n   font-style: italic;\n }\n input[type=\"text\"],\n input[type=\"email\"],\n input[type=\"password\"],\n textarea {\n   font-size: 14px;\n   line-height: 20px;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   padding: .75rem 0;\n   line-height: 1.5rem !important;\n   border: none;\n   border-radius: 0;\n   box-sizing: border-box;\n   color: #333;\n   outline: none;\n }\n input[type=\"text\"] ::placeholder,\n input[type=\"email\"] ::placeholder,\n input[type=\"password\"] ::placeholder,\n textarea ::placeholder {\n   color: #778b91;\n }\n input[type=\"text\"][disabled],\n input[type=\"email\"][disabled],\n input[type=\"password\"][disabled],\n textarea[disabled] {\n   opacity: .5;\n }\n input:-webkit-autofill {\n   -webkit-box-shadow: 0 0 0 1000px white inset;\n }\n .checkbox {\n   display: inline-block;\n   height: 3rem;\n   position: relative;\n   vertical-align: middle;\n   width: 44px;\n }\n .checkbox input[type=\"checkbox\"] {\n   font-size: 1em;\n   visibility: hidden;\n }\n .checkbox input[type=\"checkbox\"] + span:before {\n   position: absolute;\n   top: 50%;\n   right: auto;\n   bottom: auto;\n   left: 50%;\n   width: 0.85em;\n   height: 0.85em;\n   transform: translate3d(-50%, -50%, 0);\n   background: transparent;\n   box-shadow: #2cc5d2 0 0 0 1px inset;\n   content: '';\n   display: block;\n }\n .checkbox input[type=\"checkbox\"]:checked + span:before {\n   font-size: 16px;\n   line-height: 24px;\n   box-shadow: none;\n   color: #2cc5d2;\n   margin-top: -1px;\n   font-family: 'percolate';\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n   content: \"\\e65e\";\n }\n .input-symbol {\n   display: inline-block;\n   position: relative;\n }\n .input-symbol.error [class^=\"icon-\"],\n .input-symbol.error [class*=\" icon-\"] {\n   color: #ff4400;\n }\n .input-symbol [class^=\"icon-\"],\n .input-symbol [class*=\" icon-\"] {\n   left: 1em;\n }\n .input-symbol input {\n   padding-left: 3em;\n }\n .input-symbol input {\n   width: 100%;\n }\n .input-symbol input:focus + [class^=\"icon-\"],\n .input-symbol input:focus + [class*=\" icon-\"] {\n   color: #2cc5d2;\n }\n .input-symbol [class^=\"icon-\"],\n .input-symbol [class*=\" icon-\"] {\n   transition: all 300ms ease-in;\n   transform: translate3d(0, -50%, 0);\n   background: transparent;\n   color: #aaa;\n   font-size: 1em;\n   height: 1em;\n   position: absolute;\n   top: 50%;\n   width: 1em;\n }\n @font-face {\n   font-family: \"percolate\";\n   src: url(\"/icon/percolate.eot?-5w3um4\");\n   src: url(\"/icon/percolate.eot?#iefix5w3um4\") format(\"embedded-opentype\"), url(\"/icon/percolate.woff?5w3um4\") format(\"woff\"), url(\"/icon/percolate.ttf?5w3um4\") format(\"truetype\"), url(\"/icon/percolate.svg?5w3um4\") format(\"svg\");\n   font-weight: normal;\n   font-style: normal;\n }\n [class^=\"icon-\"],\n [class*=\" icon-\"] {\n   font-family: \"percolate\";\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   /* Better Font Rendering =========== */\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n .icon-graphql:before {\n   content: \"\\e90a\";\n }\n .icon-redux:before {\n   content: \"\\e908\";\n }\n .icon-grid:before {\n   content: \"\\e909\";\n }\n .icon-redirect:before {\n   content: \"\\e907\";\n }\n .icon-grow:before {\n   content: \"\\e903\";\n }\n .icon-lightning:before {\n   content: \"\\e904\";\n }\n .icon-request-change:before {\n   content: \"\\e905\";\n }\n .icon-transfer:before {\n   content: \"\\e906\";\n }\n .icon-calendar:before {\n   content: \"\\e902\";\n }\n .icon-sidebar:before {\n   content: \"\\e900\";\n }\n .icon-tablet:before {\n   content: \"\\e901\";\n }\n .icon-atmosphere:before {\n   content: \"\\e671\";\n }\n .icon-browser:before {\n   content: \"\\e672\";\n }\n .icon-database:before {\n   content: \"\\e673\";\n }\n .icon-expand-alt:before {\n   content: \"\\e674\";\n }\n .icon-mobile:before {\n   content: \"\\e675\";\n }\n .icon-watch:before {\n   content: \"\\e676\";\n }\n .icon-home:before {\n   content: \"\\e600\";\n }\n .icon-user-alt:before {\n   content: \"\\e601\";\n }\n .icon-user:before {\n   content: \"\\e602\";\n }\n .icon-user-add:before {\n   content: \"\\e603\";\n }\n .icon-users:before {\n   content: \"\\e604\";\n }\n .icon-profile:before {\n   content: \"\\e605\";\n }\n .icon-bookmark:before {\n   content: \"\\e606\";\n }\n .icon-bookmark-hollow:before {\n   content: \"\\e607\";\n }\n .icon-star:before {\n   content: \"\\e608\";\n }\n .icon-star-hollow:before {\n   content: \"\\e609\";\n }\n .icon-circle:before {\n   content: \"\\e60a\";\n }\n .icon-circle-hollow:before {\n   content: \"\\e60b\";\n }\n .icon-heart:before {\n   content: \"\\e60c\";\n }\n .icon-heart-hollow:before {\n   content: \"\\e60d\";\n }\n .icon-face-happy:before {\n   content: \"\\e60e\";\n }\n .icon-face-sad:before {\n   content: \"\\e60f\";\n }\n .icon-face-neutral:before {\n   content: \"\\e610\";\n }\n .icon-lock:before {\n   content: \"\\e611\";\n }\n .icon-unlock:before {\n   content: \"\\e612\";\n }\n .icon-key:before {\n   content: \"\\e613\";\n }\n .icon-arrow-left-alt:before {\n   content: \"\\e614\";\n }\n .icon-arrow-right-alt:before {\n   content: \"\\e615\";\n }\n .icon-sync:before {\n   content: \"\\e616\";\n }\n .icon-reply:before {\n   content: \"\\e617\";\n }\n .icon-expand:before {\n   content: \"\\e618\";\n }\n .icon-arrow-left:before {\n   content: \"\\e619\";\n }\n .icon-arrow-up:before {\n   content: \"\\e61a\";\n }\n .icon-arrow-down:before {\n   content: \"\\e61b\";\n }\n .icon-arrow-right:before {\n   content: \"\\e61c\";\n }\n .icon-chevron-down:before {\n   content: \"\\e61d\";\n }\n .icon-back:before {\n   content: \"\\e61e\";\n }\n .icon-download:before {\n   content: \"\\e61f\";\n }\n .icon-upload:before {\n   content: \"\\e620\";\n }\n .icon-proceed:before {\n   content: \"\\e621\";\n }\n .icon-info:before {\n   content: \"\\e622\";\n }\n .icon-question:before {\n   content: \"\\e623\";\n }\n .icon-alert:before {\n   content: \"\\e624\";\n }\n .icon-edit:before {\n   content: \"\\e625\";\n }\n .icon-paintbrush:before {\n   content: \"\\e626\";\n }\n .icon-close:before {\n   content: \"\\e627\";\n }\n .icon-trash:before {\n   content: \"\\e628\";\n }\n .icon-cross:before {\n   content: \"\\e629\";\n }\n .icon-delete:before {\n   content: \"\\e62a\";\n }\n .icon-power:before {\n   content: \"\\e62b\";\n }\n .icon-add:before {\n   content: \"\\e62c\";\n }\n .icon-plus:before {\n   content: \"\\e62d\";\n }\n .icon-document:before {\n   content: \"\\e62e\";\n }\n .icon-graph-line:before {\n   content: \"\\e62f\";\n }\n .icon-doc-chart:before {\n   content: \"\\e630\";\n }\n .icon-doc-list:before {\n   content: \"\\e631\";\n }\n .icon-category:before {\n   content: \"\\e632\";\n }\n .icon-copy:before {\n   content: \"\\e633\";\n }\n .icon-book:before {\n   content: \"\\e634\";\n }\n .icon-certificate:before {\n   content: \"\\e636\";\n }\n .icon-print:before {\n   content: \"\\e637\";\n }\n .icon-list-unordered:before {\n   content: \"\\e638\";\n }\n .icon-graph-bar:before {\n   content: \"\\e639\";\n }\n .icon-menu:before {\n   content: \"\\e63a\";\n }\n .icon-filter:before {\n   content: \"\\e63b\";\n }\n .icon-ellipsis:before {\n   content: \"\\e63c\";\n }\n .icon-cog:before {\n   content: \"\\e63d\";\n }\n .icon-wrench:before {\n   content: \"\\e63e\";\n }\n .icon-nut:before {\n   content: \"\\e63f\";\n }\n .icon-camera:before {\n   content: \"\\e640\";\n }\n .icon-eye:before {\n   content: \"\\e641\";\n }\n .icon-photo:before {\n   content: \"\\e642\";\n }\n .icon-video:before {\n   content: \"\\e643\";\n }\n .icon-speaker:before {\n   content: \"\\e644\";\n }\n .icon-phone:before {\n   content: \"\\e645\";\n }\n .icon-flag:before {\n   content: \"\\e646\";\n }\n .icon-pin:before {\n   content: \"\\e647\";\n }\n .icon-compass:before {\n   content: \"\\e648\";\n }\n .icon-globe:before {\n   content: \"\\e649\";\n }\n .icon-location:before {\n   content: \"\\e64a\";\n }\n .icon-search:before {\n   content: \"\\e64b\";\n }\n .icon-timer:before {\n   content: \"\\e64c\";\n }\n .icon-time:before {\n   content: \"\\e64d\";\n }\n .icon-dashboard:before {\n   content: \"\\e64e\";\n }\n .icon-hourglass:before {\n   content: \"\\e64f\";\n }\n .icon-play:before {\n   content: \"\\e650\";\n }\n .icon-stop:before {\n   content: \"\\e651\";\n }\n .icon-email:before {\n   content: \"\\e652\";\n }\n .icon-comment:before {\n   content: \"\\e653\";\n }\n .icon-link:before {\n   content: \"\\e654\";\n }\n .icon-paperclip:before {\n   content: \"\\e655\";\n }\n .icon-box:before {\n   content: \"\\e656\";\n }\n .icon-structure:before {\n   content: \"\\e657\";\n }\n .icon-commit:before {\n   content: \"\\e658\";\n }\n .icon-cpu:before {\n   content: \"\\e659\";\n }\n .icon-memory:before {\n   content: \"\\e65a\";\n }\n .icon-outbox:before {\n   content: \"\\e65b\";\n }\n .icon-share:before {\n   content: \"\\e65c\";\n }\n .icon-button:before {\n   content: \"\\e65d\";\n }\n .icon-check:before {\n   content: \"\\e65e\";\n }\n .icon-form:before {\n   content: \"\\e65f\";\n }\n .icon-admin:before {\n   content: \"\\e660\";\n }\n .icon-paragraph:before {\n   content: \"\\e661\";\n }\n .icon-bell:before {\n   content: \"\\e662\";\n }\n .icon-rss:before {\n   content: \"\\e663\";\n }\n .icon-basket:before {\n   content: \"\\e664\";\n }\n .icon-credit:before {\n   content: \"\\e665\";\n }\n .icon-support:before {\n   content: \"\\e666\";\n }\n .icon-shield:before {\n   content: \"\\e667\";\n }\n .icon-beaker:before {\n   content: \"\\e668\";\n }\n .icon-google:before {\n   content: \"\\e669\";\n }\n .icon-gdrive:before {\n   content: \"\\e66a\";\n }\n .icon-youtube:before {\n   content: \"\\e66b\";\n }\n .icon-facebook:before {\n   content: \"\\e66c\";\n }\n .icon-thumbs-up:before {\n   content: \"\\e66d\";\n }\n .icon-twitter:before {\n   content: \"\\e66e\";\n }\n .icon-github:before {\n   content: \"\\e66f\";\n }\n .icon-meteor:before {\n   content: \"\\e670\";\n }\n a {\n   transition: all 200ms ease-in;\n   color: #5db9ff;\n   cursor: pointer;\n   text-decoration: none;\n }\n a:hover {\n   color: #239da8;\n }\n a:active {\n   color: #555;\n }\n a:focus {\n   outline: none;\n }\n .list-heading {\n   letter-spacing: .3em;\n   text-indent: .3em;\n   text-transform: uppercase;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   font-size: 11px;\n   padding-left: 15px;\n   line-height: 40px;\n   background: #f8f8f8;\n   color: #aaa;\n }\n .list-heading .icon-sync {\n   opacity: 1;\n   animation: spin 2s infinite linear;\n   display: inline-block;\n   margin-right: 4px;\n }\n .list-item {\n   font-size: 14px;\n   line-height: 20px;\n   display: flex;\n   flex-wrap: wrap;\n   height: 3rem;\n   width: 100%;\n   background: white;\n   transition: all ease-out 150ms;\n }\n .list-item .title {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   flex: 1;\n }\n .list-item input[type=\"text\"] {\n   background: transparent;\n   width: 100%;\n }\n .list-item input[type=\"text\"]:focus {\n   cursor: text;\n }\n .list-item .actions {\n   transition: all 200ms ease-in;\n   padding-right: 20px;\n }\n .list-item .actions a {\n   display: inline-block;\n   vertical-align: top;\n   text-align: center;\n   color: #eee;\n }\n .list-item .actions a:hover {\n   color: #2cc5d2;\n }\n .list-item .actions a:active {\n   color: #555;\n }\n .list-item .actions [class^=\"icon-\"] {\n   font-size: 16px;\n   line-height: 24px;\n   line-height: 3rem;\n   text-align: center;\n }\n .list-item.TASK_PINNED .icon-star {\n   color: #2cc5d2;\n }\n .list-item.TASK_ARCHIVED input[type=\"text\"] {\n   color: #aaa;\n }\n .list-item:hover {\n   background-image: linear-gradient(to bottom, #e5f9f7 0%, #f0fffd 100%);\n }\n .list-item:hover .checkbox {\n   cursor: pointer;\n }\n .list-item + .list-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-item.checked input[type=\"text\"] {\n   color: #ccc;\n   text-decoration: line-through;\n }\n .list-item.checked .delete-item {\n   display: inline-block;\n }\n .loading-item {\n   height: 3rem;\n   width: 100%;\n   background: white;\n   display: flex;\n   align-items: center;\n   line-height: 1rem;\n   padding-left: 16px;\n }\n .loading-item .glow-checkbox,\n .loading-item .glow-text span {\n   animation: glow 1.5s ease-in-out infinite;\n   background: #eee;\n   color: transparent;\n   cursor: progress;\n   display: inline-block;\n }\n .loading-item .glow-checkbox {\n   margin-right: 16px;\n   width: 12px;\n   height: 12px;\n }\n .loading-item + .loading-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-items {\n   position: relative;\n   background: white;\n   min-height: 288px;\n }\n .list-items .select-placeholder {\n   border: none;\n   width: 48px;\n }\n .wrapper-message {\n   position: absolute;\n   top: 45%;\n   right: 0;\n   bottom: auto;\n   left: 0;\n   width: auto;\n   height: auto;\n   transform: translate3d(0, -50%, 0);\n   text-align: center;\n }\n .wrapper-message [class^=\"icon-\"],\n .wrapper-message [class*=\" icon-\"] {\n   font-size: 48px;\n   line-height: 56px;\n   color: #2cc5d2;\n   display: block;\n }\n .wrapper-message .title-message {\n   font-size: 16px;\n   line-height: 24px;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #555;\n }\n .wrapper-message .subtitle-message {\n   font-size: 14px;\n   line-height: 20px;\n   color: #666;\n }\n .page.lists-show {\n   min-height: 100vh;\n   background: white;\n }\n .page.lists-show nav {\n   background: #d3edf4;\n   padding: 1.5rem 1.25rem;\n   text-align: center;\n }\n @media screen and (min-width: 40em) {\n   .page.lists-show nav {\n     text-align: left;\n   }\n }\n .page.lists-show nav .title-page {\n   font-size: 20px;\n   line-height: 24px;\n   line-height: 2rem;\n   cursor: pointer;\n   white-space: nowrap;\n }\n .page.lists-show nav .title-page .title-wrapper {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #1c3f53;\n   display: inline-block;\n   vertical-align: top;\n   max-width: 100%;\n }\n",
                    "styleUrl": "../task-list/task-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list-item {{ task?.state }}\">\n  <label class=\"checkbox\">\n    <input type=\"checkbox\" name=\"checked\" [checked]=\"task?.state === 'TASK_ARCHIVED' && task?.done\" disabled=\"true\" />\n    <span class=\"custom-checkbox\" (click)=onArchive(task.id)> </span>\n  </label>\n  <div class=\"title\">\n    <input type=\"text\" [value]=\"task?.title\" readonly=\"true\" placeholder=\"Input title\" />\n  </div>\n  <div class=\"actions\">\n    <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n      <span class=\"icon-star\"></span>\n    </a>\n  </div>\n</div>\n"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-1f65a9173315979c3460de4110f5d0cc",
            "file": "src/app/components/task/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [
                "./task-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tasks",
                    "line": 20,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tasks$",
                    "type": "Observable<Task[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "TasksState.getAllTasks"
                        }
                    ]
                },
                {
                    "name": "tasksInOrder",
                    "defaultValue": "[]",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ArchiveTask, PinTask, TasksState } from '../../../state/task.state';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\n\nimport { Observable } from 'rxjs';\nimport { Task } from '../../../models/types';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: [`./task-list.component.scss`]\n})\n\nexport class TaskListComponent implements OnInit {\n  @Select(TasksState.getAllTasks) tasks$: Observable<Task[]>;\n  loading = false;\n  tasksInOrder: Task[] = [];\n\n  @Input()\n  set tasks(arr: Task[]) {\n    this.tasksInOrder = [\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n  }\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  constructor(private store: Store) {\n    console.log(store);\n  }\n\n  archiveTask(id: string): void {\n    this.store.dispatch(new ArchiveTask(id));\n  }\n\n  pinTask(id: string): void {\n    this.store.dispatch(new PinTask(id));\n  }\n\n  ngOnInit(): void { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@font-face {\n  font-family: 'percolate';\n  src: url('../../../../assets/icon/percolate.eot?-5w3um4');\n  src: url('../../../../assets/icon/percolate.eot?#iefix5w3um4') format('embedded-opentype'), url('../../../../assets/icon/percolate.woff?5w3um4')\n      format('woff'), url('../../../../assets/icon/percolate.ttf?5w3um4') format('truetype'), url('../../../../assets/icon/percolate.svg?5w3um4')\n      format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Reset.less\n * Props to Eric Meyer (meyerweb.com) for his CSS reset file. We're using an adapted version here\tthat cuts out some of the reset HTML elements we will never need here (i.e., dfn, samp, etc).\n * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */\n @import url('https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,800');\n html,\n body {\n   margin: 0;\n   padding: 0;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6,\n p,\n blockquote,\n pre,\n a,\n abbr,\n acronym,\n address,\n cite,\n code,\n del,\n dfn,\n em,\n img,\n q,\n s,\n samp,\n small,\n strike,\n strong,\n sub,\n sup,\n tt,\n var,\n dd,\n dl,\n dt,\n li,\n ol,\n ul,\n fieldset,\n form,\n label,\n legend,\n button,\n table,\n caption,\n tbody,\n tfoot,\n thead,\n tr,\n th,\n td {\n   margin: 0;\n   padding: 0;\n   border: 0;\n   font-weight: normal;\n   font-style: normal;\n   font-size: 100%;\n   line-height: 1;\n   font-family: inherit;\n }\n table {\n   border-collapse: collapse;\n   border-spacing: 0;\n }\n ol,\n ul {\n   list-style: none;\n }\n q:before,\n q:after,\n blockquote:before,\n blockquote:after {\n   content: \"\";\n }\n html {\n   font-size: 100%;\n   -webkit-text-size-adjust: 100%;\n   -ms-text-size-adjust: 100%;\n }\n a:focus {\n   outline: thin dotted;\n }\n a:hover,\n a:active {\n   outline: 0;\n }\n article,\n aside,\n details,\n figcaption,\n figure,\n footer,\n header,\n hgroup,\n nav,\n section {\n   display: block;\n }\n audio,\n canvas,\n video {\n   display: inline-block;\n   *display: inline;\n   *zoom: 1;\n }\n audio:not([controls]) {\n   display: none;\n }\n sub,\n sup {\n   font-size: 75%;\n   line-height: 0;\n   position: relative;\n   vertical-align: baseline;\n }\n sup {\n   top: -0.5em;\n }\n sub {\n   bottom: -0.25em;\n }\n img {\n   border: 0;\n   -ms-interpolation-mode: bicubic;\n }\n button,\n input,\n select,\n textarea {\n   font-size: 100%;\n   margin: 0;\n   vertical-align: baseline;\n   *vertical-align: middle;\n }\n button,\n input {\n   line-height: normal;\n   *overflow: visible;\n }\n button::-moz-focus-inner,\n input::-moz-focus-inner {\n   border: 0;\n   padding: 0;\n }\n button,\n input[type=\"button\"],\n input[type=\"reset\"],\n input[type=\"submit\"] {\n   cursor: pointer;\n   -webkit-appearance: button;\n }\n input[type=\"search\"] {\n   -webkit-appearance: textfield;\n   -webkit-box-sizing: content-box;\n   -moz-box-sizing: content-box;\n   box-sizing: content-box;\n }\n input[type=\"search\"]::-webkit-search-decoration {\n   -webkit-appearance: none;\n }\n textarea {\n   overflow: auto;\n   vertical-align: top;\n }\n @keyframes spin {\n   0% {\n     transform: rotate(0deg);\n   }\n   100% {\n     transform: rotate(359deg);\n   }\n }\n @keyframes glow {\n   0%,\n   100% {\n     opacity: 1;\n   }\n   50% {\n     opacity: 0.5;\n   }\n }\n .force-wrap {\n   word-wrap: break-word;\n   word-break: break-all;\n   -ms-word-break: break-all;\n   word-break: break-word;\n   hyphens: auto;\n }\n .type-light {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 300;\n }\n .type-bold {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n }\n .type-italic {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 400;\n   font-style: italic;\n }\n * {\n   box-sizing: border-box;\n   -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n   -webkit-tap-highlight-color: transparent;\n }\n html,\n button,\n input,\n textarea,\n select {\n   outline: none;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n body {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   color: #333;\n   font-size: 16px;\n   background-color: #26c6da;\n }\n h1,\n h2,\n h3,\n h4,\n h5,\n h6 {\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   margin: 0;\n   padding: 0;\n }\n h1 {\n   font-size: 40px;\n   line-height: 48px;\n }\n h2 {\n   font-size: 28px;\n   line-height: 32px;\n }\n h3 {\n   font-size: 24px;\n   line-height: 28px;\n }\n h4 {\n   font-size: 20px;\n   line-height: 24px;\n }\n h5 {\n   font-size: 14px;\n   line-height: 20px;\n   color: #ccc;\n   text-transform: uppercase;\n }\n h6 {\n   color: #aaa;\n }\n p {\n   font-size: 16px;\n   line-height: 24px;\n }\n sub,\n sup {\n   font-size: 0.8em;\n }\n sub {\n   bottom: -0.2em;\n }\n sup {\n   top: -0.2em;\n }\n b {\n   font-weight: bold;\n }\n em {\n   font-style: italic;\n }\n input[type=\"text\"],\n input[type=\"email\"],\n input[type=\"password\"],\n textarea {\n   font-size: 14px;\n   line-height: 20px;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-style: 400;\n   padding: .75rem 0;\n   line-height: 1.5rem !important;\n   border: none;\n   border-radius: 0;\n   box-sizing: border-box;\n   color: #333;\n   outline: none;\n }\n input[type=\"text\"] ::placeholder,\n input[type=\"email\"] ::placeholder,\n input[type=\"password\"] ::placeholder,\n textarea ::placeholder {\n   color: #778b91;\n }\n input[type=\"text\"][disabled],\n input[type=\"email\"][disabled],\n input[type=\"password\"][disabled],\n textarea[disabled] {\n   opacity: .5;\n }\n input:-webkit-autofill {\n   -webkit-box-shadow: 0 0 0 1000px white inset;\n }\n .checkbox {\n   display: inline-block;\n   height: 3rem;\n   position: relative;\n   vertical-align: middle;\n   width: 44px;\n }\n .checkbox input[type=\"checkbox\"] {\n   font-size: 1em;\n   visibility: hidden;\n }\n .checkbox input[type=\"checkbox\"] + span:before {\n   position: absolute;\n   top: 50%;\n   right: auto;\n   bottom: auto;\n   left: 50%;\n   width: 0.85em;\n   height: 0.85em;\n   transform: translate3d(-50%, -50%, 0);\n   background: transparent;\n   box-shadow: #2cc5d2 0 0 0 1px inset;\n   content: '';\n   display: block;\n }\n .checkbox input[type=\"checkbox\"]:checked + span:before {\n   font-size: 16px;\n   line-height: 24px;\n   box-shadow: none;\n   color: #2cc5d2;\n   margin-top: -1px;\n   font-family: 'percolate';\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n   content: \"\\e65e\";\n }\n .input-symbol {\n   display: inline-block;\n   position: relative;\n }\n .input-symbol.error [class^=\"icon-\"],\n .input-symbol.error [class*=\" icon-\"] {\n   color: #ff4400;\n }\n .input-symbol [class^=\"icon-\"],\n .input-symbol [class*=\" icon-\"] {\n   left: 1em;\n }\n .input-symbol input {\n   padding-left: 3em;\n }\n .input-symbol input {\n   width: 100%;\n }\n .input-symbol input:focus + [class^=\"icon-\"],\n .input-symbol input:focus + [class*=\" icon-\"] {\n   color: #2cc5d2;\n }\n .input-symbol [class^=\"icon-\"],\n .input-symbol [class*=\" icon-\"] {\n   transition: all 300ms ease-in;\n   transform: translate3d(0, -50%, 0);\n   background: transparent;\n   color: #aaa;\n   font-size: 1em;\n   height: 1em;\n   position: absolute;\n   top: 50%;\n   width: 1em;\n }\n @font-face {\n   font-family: \"percolate\";\n   src: url(\"/icon/percolate.eot?-5w3um4\");\n   src: url(\"/icon/percolate.eot?#iefix5w3um4\") format(\"embedded-opentype\"), url(\"/icon/percolate.woff?5w3um4\") format(\"woff\"), url(\"/icon/percolate.ttf?5w3um4\") format(\"truetype\"), url(\"/icon/percolate.svg?5w3um4\") format(\"svg\");\n   font-weight: normal;\n   font-style: normal;\n }\n [class^=\"icon-\"],\n [class*=\" icon-\"] {\n   font-family: \"percolate\";\n   speak: none;\n   font-style: normal;\n   font-weight: normal;\n   font-variant: normal;\n   text-transform: none;\n   line-height: 1;\n   /* Better Font Rendering =========== */\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n }\n .icon-graphql:before {\n   content: \"\\e90a\";\n }\n .icon-redux:before {\n   content: \"\\e908\";\n }\n .icon-grid:before {\n   content: \"\\e909\";\n }\n .icon-redirect:before {\n   content: \"\\e907\";\n }\n .icon-grow:before {\n   content: \"\\e903\";\n }\n .icon-lightning:before {\n   content: \"\\e904\";\n }\n .icon-request-change:before {\n   content: \"\\e905\";\n }\n .icon-transfer:before {\n   content: \"\\e906\";\n }\n .icon-calendar:before {\n   content: \"\\e902\";\n }\n .icon-sidebar:before {\n   content: \"\\e900\";\n }\n .icon-tablet:before {\n   content: \"\\e901\";\n }\n .icon-atmosphere:before {\n   content: \"\\e671\";\n }\n .icon-browser:before {\n   content: \"\\e672\";\n }\n .icon-database:before {\n   content: \"\\e673\";\n }\n .icon-expand-alt:before {\n   content: \"\\e674\";\n }\n .icon-mobile:before {\n   content: \"\\e675\";\n }\n .icon-watch:before {\n   content: \"\\e676\";\n }\n .icon-home:before {\n   content: \"\\e600\";\n }\n .icon-user-alt:before {\n   content: \"\\e601\";\n }\n .icon-user:before {\n   content: \"\\e602\";\n }\n .icon-user-add:before {\n   content: \"\\e603\";\n }\n .icon-users:before {\n   content: \"\\e604\";\n }\n .icon-profile:before {\n   content: \"\\e605\";\n }\n .icon-bookmark:before {\n   content: \"\\e606\";\n }\n .icon-bookmark-hollow:before {\n   content: \"\\e607\";\n }\n .icon-star:before {\n   content: \"\\e608\";\n }\n .icon-star-hollow:before {\n   content: \"\\e609\";\n }\n .icon-circle:before {\n   content: \"\\e60a\";\n }\n .icon-circle-hollow:before {\n   content: \"\\e60b\";\n }\n .icon-heart:before {\n   content: \"\\e60c\";\n }\n .icon-heart-hollow:before {\n   content: \"\\e60d\";\n }\n .icon-face-happy:before {\n   content: \"\\e60e\";\n }\n .icon-face-sad:before {\n   content: \"\\e60f\";\n }\n .icon-face-neutral:before {\n   content: \"\\e610\";\n }\n .icon-lock:before {\n   content: \"\\e611\";\n }\n .icon-unlock:before {\n   content: \"\\e612\";\n }\n .icon-key:before {\n   content: \"\\e613\";\n }\n .icon-arrow-left-alt:before {\n   content: \"\\e614\";\n }\n .icon-arrow-right-alt:before {\n   content: \"\\e615\";\n }\n .icon-sync:before {\n   content: \"\\e616\";\n }\n .icon-reply:before {\n   content: \"\\e617\";\n }\n .icon-expand:before {\n   content: \"\\e618\";\n }\n .icon-arrow-left:before {\n   content: \"\\e619\";\n }\n .icon-arrow-up:before {\n   content: \"\\e61a\";\n }\n .icon-arrow-down:before {\n   content: \"\\e61b\";\n }\n .icon-arrow-right:before {\n   content: \"\\e61c\";\n }\n .icon-chevron-down:before {\n   content: \"\\e61d\";\n }\n .icon-back:before {\n   content: \"\\e61e\";\n }\n .icon-download:before {\n   content: \"\\e61f\";\n }\n .icon-upload:before {\n   content: \"\\e620\";\n }\n .icon-proceed:before {\n   content: \"\\e621\";\n }\n .icon-info:before {\n   content: \"\\e622\";\n }\n .icon-question:before {\n   content: \"\\e623\";\n }\n .icon-alert:before {\n   content: \"\\e624\";\n }\n .icon-edit:before {\n   content: \"\\e625\";\n }\n .icon-paintbrush:before {\n   content: \"\\e626\";\n }\n .icon-close:before {\n   content: \"\\e627\";\n }\n .icon-trash:before {\n   content: \"\\e628\";\n }\n .icon-cross:before {\n   content: \"\\e629\";\n }\n .icon-delete:before {\n   content: \"\\e62a\";\n }\n .icon-power:before {\n   content: \"\\e62b\";\n }\n .icon-add:before {\n   content: \"\\e62c\";\n }\n .icon-plus:before {\n   content: \"\\e62d\";\n }\n .icon-document:before {\n   content: \"\\e62e\";\n }\n .icon-graph-line:before {\n   content: \"\\e62f\";\n }\n .icon-doc-chart:before {\n   content: \"\\e630\";\n }\n .icon-doc-list:before {\n   content: \"\\e631\";\n }\n .icon-category:before {\n   content: \"\\e632\";\n }\n .icon-copy:before {\n   content: \"\\e633\";\n }\n .icon-book:before {\n   content: \"\\e634\";\n }\n .icon-certificate:before {\n   content: \"\\e636\";\n }\n .icon-print:before {\n   content: \"\\e637\";\n }\n .icon-list-unordered:before {\n   content: \"\\e638\";\n }\n .icon-graph-bar:before {\n   content: \"\\e639\";\n }\n .icon-menu:before {\n   content: \"\\e63a\";\n }\n .icon-filter:before {\n   content: \"\\e63b\";\n }\n .icon-ellipsis:before {\n   content: \"\\e63c\";\n }\n .icon-cog:before {\n   content: \"\\e63d\";\n }\n .icon-wrench:before {\n   content: \"\\e63e\";\n }\n .icon-nut:before {\n   content: \"\\e63f\";\n }\n .icon-camera:before {\n   content: \"\\e640\";\n }\n .icon-eye:before {\n   content: \"\\e641\";\n }\n .icon-photo:before {\n   content: \"\\e642\";\n }\n .icon-video:before {\n   content: \"\\e643\";\n }\n .icon-speaker:before {\n   content: \"\\e644\";\n }\n .icon-phone:before {\n   content: \"\\e645\";\n }\n .icon-flag:before {\n   content: \"\\e646\";\n }\n .icon-pin:before {\n   content: \"\\e647\";\n }\n .icon-compass:before {\n   content: \"\\e648\";\n }\n .icon-globe:before {\n   content: \"\\e649\";\n }\n .icon-location:before {\n   content: \"\\e64a\";\n }\n .icon-search:before {\n   content: \"\\e64b\";\n }\n .icon-timer:before {\n   content: \"\\e64c\";\n }\n .icon-time:before {\n   content: \"\\e64d\";\n }\n .icon-dashboard:before {\n   content: \"\\e64e\";\n }\n .icon-hourglass:before {\n   content: \"\\e64f\";\n }\n .icon-play:before {\n   content: \"\\e650\";\n }\n .icon-stop:before {\n   content: \"\\e651\";\n }\n .icon-email:before {\n   content: \"\\e652\";\n }\n .icon-comment:before {\n   content: \"\\e653\";\n }\n .icon-link:before {\n   content: \"\\e654\";\n }\n .icon-paperclip:before {\n   content: \"\\e655\";\n }\n .icon-box:before {\n   content: \"\\e656\";\n }\n .icon-structure:before {\n   content: \"\\e657\";\n }\n .icon-commit:before {\n   content: \"\\e658\";\n }\n .icon-cpu:before {\n   content: \"\\e659\";\n }\n .icon-memory:before {\n   content: \"\\e65a\";\n }\n .icon-outbox:before {\n   content: \"\\e65b\";\n }\n .icon-share:before {\n   content: \"\\e65c\";\n }\n .icon-button:before {\n   content: \"\\e65d\";\n }\n .icon-check:before {\n   content: \"\\e65e\";\n }\n .icon-form:before {\n   content: \"\\e65f\";\n }\n .icon-admin:before {\n   content: \"\\e660\";\n }\n .icon-paragraph:before {\n   content: \"\\e661\";\n }\n .icon-bell:before {\n   content: \"\\e662\";\n }\n .icon-rss:before {\n   content: \"\\e663\";\n }\n .icon-basket:before {\n   content: \"\\e664\";\n }\n .icon-credit:before {\n   content: \"\\e665\";\n }\n .icon-support:before {\n   content: \"\\e666\";\n }\n .icon-shield:before {\n   content: \"\\e667\";\n }\n .icon-beaker:before {\n   content: \"\\e668\";\n }\n .icon-google:before {\n   content: \"\\e669\";\n }\n .icon-gdrive:before {\n   content: \"\\e66a\";\n }\n .icon-youtube:before {\n   content: \"\\e66b\";\n }\n .icon-facebook:before {\n   content: \"\\e66c\";\n }\n .icon-thumbs-up:before {\n   content: \"\\e66d\";\n }\n .icon-twitter:before {\n   content: \"\\e66e\";\n }\n .icon-github:before {\n   content: \"\\e66f\";\n }\n .icon-meteor:before {\n   content: \"\\e670\";\n }\n a {\n   transition: all 200ms ease-in;\n   color: #5db9ff;\n   cursor: pointer;\n   text-decoration: none;\n }\n a:hover {\n   color: #239da8;\n }\n a:active {\n   color: #555;\n }\n a:focus {\n   outline: none;\n }\n .list-heading {\n   letter-spacing: .3em;\n   text-indent: .3em;\n   text-transform: uppercase;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   font-size: 11px;\n   padding-left: 15px;\n   line-height: 40px;\n   background: #f8f8f8;\n   color: #aaa;\n }\n .list-heading .icon-sync {\n   opacity: 1;\n   animation: spin 2s infinite linear;\n   display: inline-block;\n   margin-right: 4px;\n }\n .list-item {\n   font-size: 14px;\n   line-height: 20px;\n   display: flex;\n   flex-wrap: wrap;\n   height: 3rem;\n   width: 100%;\n   background: white;\n   transition: all ease-out 150ms;\n }\n .list-item .title {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   flex: 1;\n }\n .list-item input[type=\"text\"] {\n   background: transparent;\n   width: 100%;\n }\n .list-item input[type=\"text\"]:focus {\n   cursor: text;\n }\n .list-item .actions {\n   transition: all 200ms ease-in;\n   padding-right: 20px;\n }\n .list-item .actions a {\n   display: inline-block;\n   vertical-align: top;\n   text-align: center;\n   color: #eee;\n }\n .list-item .actions a:hover {\n   color: #2cc5d2;\n }\n .list-item .actions a:active {\n   color: #555;\n }\n .list-item .actions [class^=\"icon-\"] {\n   font-size: 16px;\n   line-height: 24px;\n   line-height: 3rem;\n   text-align: center;\n }\n .list-item.TASK_PINNED .icon-star {\n   color: #2cc5d2;\n }\n .list-item.TASK_ARCHIVED input[type=\"text\"] {\n   color: #aaa;\n }\n .list-item:hover {\n   background-image: linear-gradient(to bottom, #e5f9f7 0%, #f0fffd 100%);\n }\n .list-item:hover .checkbox {\n   cursor: pointer;\n }\n .list-item + .list-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-item.checked input[type=\"text\"] {\n   color: #ccc;\n   text-decoration: line-through;\n }\n .list-item.checked .delete-item {\n   display: inline-block;\n }\n .loading-item {\n   height: 3rem;\n   width: 100%;\n   background: white;\n   display: flex;\n   align-items: center;\n   line-height: 1rem;\n   padding-left: 16px;\n }\n .loading-item .glow-checkbox,\n .loading-item .glow-text span {\n   animation: glow 1.5s ease-in-out infinite;\n   background: #eee;\n   color: transparent;\n   cursor: progress;\n   display: inline-block;\n }\n .loading-item .glow-checkbox {\n   margin-right: 16px;\n   width: 12px;\n   height: 12px;\n }\n .loading-item + .loading-item {\n   border-top: 1px solid #f0f9fb;\n }\n .list-items {\n   position: relative;\n   background: white;\n   min-height: 288px;\n }\n .list-items .select-placeholder {\n   border: none;\n   width: 48px;\n }\n .wrapper-message {\n   position: absolute;\n   top: 45%;\n   right: 0;\n   bottom: auto;\n   left: 0;\n   width: auto;\n   height: auto;\n   transform: translate3d(0, -50%, 0);\n   text-align: center;\n }\n .wrapper-message [class^=\"icon-\"],\n .wrapper-message [class*=\" icon-\"] {\n   font-size: 48px;\n   line-height: 56px;\n   color: #2cc5d2;\n   display: block;\n }\n .wrapper-message .title-message {\n   font-size: 16px;\n   line-height: 24px;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #555;\n }\n .wrapper-message .subtitle-message {\n   font-size: 14px;\n   line-height: 20px;\n   color: #666;\n }\n .page.lists-show {\n   min-height: 100vh;\n   background: white;\n }\n .page.lists-show nav {\n   background: #d3edf4;\n   padding: 1.5rem 1.25rem;\n   text-align: center;\n }\n @media screen and (min-width: 40em) {\n   .page.lists-show nav {\n     text-align: left;\n   }\n }\n .page.lists-show nav .title-page {\n   font-size: 20px;\n   line-height: 24px;\n   line-height: 2rem;\n   cursor: pointer;\n   white-space: nowrap;\n }\n .page.lists-show nav .title-page .title-wrapper {\n   overflow: hidden;\n   text-overflow: ellipsis;\n   white-space: nowrap;\n   font-family: 'Nunito Sans', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n   font-weight: 800;\n   color: #1c3f53;\n   display: inline-block;\n   vertical-align: top;\n   max-width: 100%;\n }\n",
                    "styleUrl": "./task-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "args": [
                            {
                                "name": "arr",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-task>\n\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n    <span class=\"icon-check\"></span>\n    <div class=\"title-message\">You have no tasks</div>\n    <div class=\"subtitle-message\">Sit back and relax</div>\n  </div>\n\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "PageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServicesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  onArchiveTask: action('onArchiveTask'),\n  onPinTask: action('onPinTask')\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n      done: true\n    },\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onArchiveTask: actionsData.onArchiveTask,\n    onPinTask: actionsData.onPinTask\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/page/page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/page/page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n      done: false\n    },\n    onPinTask: actionsData.onPinTask\n  }\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  done: false,\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/page/page.stories.ts",
                "type": "Story<PageComponent>",
                "defaultValue": "(args: PageComponent) => ({\n  component: PageComponent,\n  props: args,\n})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "withPinnedTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  ...defaultTasksData.slice(0, defaultTasksData.length),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
                }
            ],
            "src/app/components/task/task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  onArchiveTask: action('onArchiveTask'),\n  onPinTask: action('onPinTask')\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n      done: true\n    },\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onArchiveTask: actionsData.onArchiveTask,\n    onPinTask: actionsData.onPinTask\n  },\n})"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n      done: false\n    },\n    onPinTask: actionsData.onPinTask\n  }\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  done: false,\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/components/task/task-list/task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "withPinnedTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ...defaultTasksData.slice(0, defaultTasksData.length),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/app/components/header/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
                }
            ],
            "src/app/components/page/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/page/page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/page/page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/page/page.stories.ts",
                    "type": "Story<PageComponent>",
                    "defaultValue": "(args: PageComponent) => ({\n  component: PageComponent,\n  props: args,\n})"
                }
            ],
            "src/jest-config/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PageComponent",
                        "children": [
                            {
                                "path": "tasklist",
                                "component": "TaskListComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withPinnedTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/types.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}